<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Order">

	<sql id="tableName">d_order</sql>

	<resultMap id="OrderMap" type="Order">
            <id column="id" property="id"/>
            <result column="batchId" property="batchId"/>
            <result column="customerGroupId" property="customerGroupId"/>
            <result column="goodsId" property="goodsId"/>
            <result column="orderPrice" property="orderPrice"/>
            <result column="goodsCnt" property="goodsCnt"/>
            <result column="orderCnt" property="orderCnt"/>
            <result column="status" property="status"/>
            <result column="goodsName" property="goodsName"/>
            <result column="expireDate" property="expireDate"/>
            <result column="goodsCombine" property="goodsCombine"/>
            <result column="goodsSerialNumber" property="goodsSerialNumber"/>
            <result column="goodsCoverImg" property="goodsCoverImg"/>
            <result column="groupId" property="groupId"/>

            <result column="customerName" property="customerName"/>
            <result column="phone" property="phone"/>
            <result column="serialNumber" property="serialNumber"/>
            <result column="customerType" property="customerType"/>
            <result column="payType" property="payType"/>
            <result column="goodsTypeId" property="goodsTypeId"/>
            <result column="sumMoney" property="sumMoney"/>
            <result column="actuallyMoney" property="actuallyMoney"/>
            <result column="groupName" property="groupName"/>
            <result column="creator" property="creator"/>
            <result column="createDate" property="createDate"/>
            <result column="parentName" property="parentName"/>

            <collection property="items" ofType="OrderItem">
                <id column="iid" property="id"/>
                <result column="igoodsName" property="goodsName"/>
                <result column="igoodsCnt" property="cnt"/>
                <result column="igoodsCntUsed" property="cntUsed"/>
                <result column="igoodsTagName" property="goodsTagName"/>
                <result column="igoodsPrice" property="goodsPrice"/>
                <result column="igoodsUnit" property="goodsUnit"/>
            </collection>
        </resultMap>

	<select id="selectSearchList" parameterType="Map" resultMap="OrderMap">
		SELECT
			do.id,
			do.batch_id AS batchId,
			do.customer_group_id AS customerGroupId,
			do.goods_id AS goodsId,
			do.goods_cnt AS goodsCnt,
			do.order_cnt AS orderCnt,
			do.order_price AS orderPrice,
			do.status,
			do.goods_name AS goodsName,
			do.goods_combine AS goodsCombine,
			do.expire_date AS expireDate,
			do.create_date AS createDate,
			IFNULL(dc.name,dc.nick_name) AS customerName,
			dc.phone,
			dcg.serial_number AS serialNumber,
			dcg.group_id AS groupId,
			dcg.type AS customerType,
			dop.pay_type AS payType,
			do.goods_type_id AS goodsTypeId,
			dop.sum_money AS sumMoney,
			dop.actually_money AS actuallyMoney,
			dg.name AS groupName,
			nu.username AS creator,
			doi.id AS iid,
			doi.goods_name AS igoodsName,
			doi.cnt AS igoodsCnt,
			doi.cnt_used AS igoodsCntUsed,
			doi.goods_tag_name AS igoodsTagName,
			doi.goods_price AS igoodsPrice,
			doi.goods_unit AS igoodsUnit,
			dcp.name AS parentName,
			dgs.serial_number AS goodsSerialNumber,
			dgs.cover_img AS goodsCoverImg
		FROM <include refid="tableName"/> do
		LEFT JOIN d_order_item doi ON doi.order_id = do.id
		LEFT JOIN d_customer_group dcg ON do.customer_group_id = dcg.id
		LEFT JOIN d_customer_group dcgp ON dcg.parent_id = dcgp.id
		LEFT JOIN d_customer dcp ON dcp.id = dcgp.customer_id
		LEFT JOIN d_group dg ON dg.id = dcg.group_id
		LEFT JOIN d_customer dc ON dc.id = dcg.customer_id
		LEFT JOIN d_order_pay dop ON dop.order_id = do.id
		LEFT JOIN d_goods dgs ON dgs.id = do.goods_id
		LEFT JOIN ns_users nu ON nu.id = do.creator
		WHERE
			do.status != -2
			<if test="groupId!=null">
				AND dcg.group_id = #{groupId}
			</if>
			<if test="order.batchId!=null and order.batchId!=''">
				AND do.batch_id = #{order.batchId}
			</if>
			<if test="order.status!=null">
				AND do.status = #{order.status}
			</if>
			<if test="order.goodsId!=null">
				AND do.goods_id = #{order.goodsId}
			</if>
			<if test="order.goodsTypeId!=null">
				AND do.goods_type_id = #{order.goodsTypeId}
			</if>
			<if test="orderPay.payType!=null">
				AND (dop.pay_type &amp; #{orderPay.payType}) = #{orderPay.payType}
			</if>
			<if test="order.customerGroupId!=null and order.customerGroupId!=''">
				AND do.customer_group_id = #{order.customerGroupId}
			</if>
			<if test="customer.name!=null and customer.name!=''">
				AND (dc.name LIKE CONCAT('%',#{customer.name},'%') OR dc.nick_name LIKE CONCAT('%',#{customer.name},'%'))
			</if>
			<if test="customer.openId!=null and customer.openId!=''">
				AND dc.open_id =#{customer.openId}
			</if>
			<if test="customer.customerGroup.serialNumber!=null and customer.customerGroup.serialNumber!=''">
				AND dcg.serial_number LIKE CONCAT('%',#{customer.customerGroup.serialNumber},'%')
			</if>
			<if test="customer.customerGroup.id!=null ">
				AND dcg.id = #{customer.customerGroup.id}
			</if>
			<if test="customer.customerGroup.type!=null">
				AND dcg.type = #{customer.customerGroup.type}
			</if>
			<if test="customer.customerGroup.groupId!=null">
				AND dg.id = #{customer.customerGroup.groupId}
			</if>
		ORDER BY do.id DESC
		<if test="rows != null and  rows > 0">
			LIMIT #{start}, #{rows}
		</if>
	</select>

	<select id="selectSearchListCount" parameterType="Map" resultType="Integer">
		SELECT
			COUNT(*)
		FROM <include refid="tableName"/> do
		LEFT JOIN d_customer_group dcg ON do.customer_group_id = dcg.id
		LEFT JOIN d_customer dc ON dc.id = dcg.customer_id
		LEFT JOIN d_order_pay dop ON dop.order_id = do.id
		WHERE
			do.status != -2
			<if test="groupId!=null">
				AND dcg.group_id = #{groupId}
			</if>
			<if test="order.goodsId!=null">
				AND do.goods_id = #{order.goodsId}
			</if>
			<if test="order.batchId!=null and order.batchId!=''">
				AND do.batch_id = #{order.batchId}
			</if>
			<if test="order.status!=null">
				AND do.status = #{order.status}
			</if>
			<if test="order.goodsTypeId!=null">
				AND do.goods_type_id = #{order.goodsTypeId}
			</if>
			<if test="orderPay.payType!=null">
				AND (dop.pay_type &amp; #{orderPay.payType}) = #{orderPay.payType}
			</if>
			<if test="order.customerGroupId!=null and order.customerGroupId!=''">
				AND do.customer_group_id = #{order.customerGroupId}
			</if>
			<if test="customer.name!=null and customer.name!=''">
				AND (dc.name LIKE CONCAT('%',#{customer.name},'%') OR dc.nick_name LIKE CONCAT('%',#{customer.name},'%'))
			</if>
			<if test="customer.openId!=null and customer.openId!=''">
				AND dc.open_id =#{customer.openId}
			</if>
			<if test="customer.customerGroup.serialNumber!=null and customer.customerGroup.serialNumber!=''">
				AND dcg.serial_number LIKE CONCAT('%',#{customer.customerGroup.serialNumber},'%')
			</if>
			<if test="customer.customerGroup.id!=null ">
				AND dcg.id = #{customer.customerGroup.id}
			</if>
			<if test="customer.customerGroup.type!=null">
				AND dcg.type = #{customer.customerGroup.type}
			</if>
			<if test="customer.customerGroup.groupId!=null">
				AND dg.id = #{customer.customerGroup.groupId}
			</if>
	</select>

	<select id="findById" parameterType="String" resultType="Order">
		SELECT
			do.id,
			do.batch_id AS batchId,
			do.customer_group_id AS customerGroupId,
			do.goods_id AS goodsId,
			do.goods_name AS goodsName,
			do.goods_combine AS goodsCombine,
			do.goods_type_id AS goodsTypeId,
			do.goods_type_name AS goodsTypeName,
			do.expire_date AS expiredDate,
			do.goods_desc AS goodsDesc,
			do.goods_cnt AS goodsCnt,
			do.goods_item_type_cnt AS goodsItemType,
			do.goods_sum_price AS goodsSumPrice,
			do.order_price AS orderPrice,
			do.order_cnt AS orderCnt,
			do.status,
			dcg.group_id AS groupId
		FROM <include refid="tableName"/> do
		LEFT JOIN d_customer_group dcg ON do.customer_group_id = dcg.id
		LEFT JOIN d_customer dc ON dc.id = dcg.customer_id
		WHERE do.id = #{id}
	</select>

	<insert id="add" parameterType="Order" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO <include refid="tableName"/>
		(
			batch_id,
			customer_group_id,
			goods_id,
			goods_name,
			goods_combine,
			goods_type_id,
			goods_type_name,
			expire_date,
			goods_desc,
			goods_cnt,
			goods_item_type_cnt,
			goods_sum_price,
			order_price,
			order_cnt,
			status,
			create_date,
			creator,
			create_ip
		)
		VALUES 
		(
			#{batchId},
			#{customerGroupId},
			#{goodsId},
			#{goodsName},
			#{goodsCombine},
			#{goodsTypeId},
			#{goodsTypeName},
			#{expireDate},
			#{goodsDesc},
			#{goodsCnt},
			#{goodsItemTypeCnt},
			#{goodsSumPrice},
			#{orderPrice},
			#{orderCnt},
			#{status},
			NOW(),
		  	#{creator},
		  	#{createIp}
		)
	</insert>

	<update id="changeStatus" parameterType="Map">
		UPDATE <include refid="tableName"/>
		SET
			update_date = NOW()
			,updater = #{updater}
			,status = #{status}
		WHERE
			id IN
			<foreach collection="ids" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
 	</update>

 	<select id="queryOrderInfo4Refund" parameterType="Integer" resultType="OrderRefundParams">
		SELECT
			do.status AS orderStatus,
			dop.actually_money AS orderActualMoney,
			SUM(dbwd.bonus_change) AS bonusGenerated,
			IFNULL(dc.name,dc.nick_name) AS parentCustomerName,
			dcg.id AS parentCustomerGroupId,
			dbw.available_bonus AS availableBonus,
			do.create_date AS createDate,
			do.customer_group_id AS customerGroupId
		FROM d_order do
		LEFT JOIN d_order_pay dop ON do.id = dop.order_id
		LEFT JOIN d_bonus_wallet_detail dbwd ON dbwd.batch_id = do.id AND dbwd.change_type IN (1,3)
		LEFT JOIN d_customer_group dcg ON dcg.bonus_wallet_id = dbwd.bonus_wallet_id
		LEFT JOIN d_customer dc ON dc.id = dcg.customer_id
		LEFT JOIN d_bonus_wallet dbw ON dbw.id = dcg.bonus_wallet_id
		WHERE do.id = #{orderId}
		GROUP BY do.id
	</select>

</mapper>