<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CustomerGroup">

	<sql id="tableName">d_customer_group</sql>

	<select id="findById" parameterType="String" resultType="CustomerGroup">
		SELECT
			dcg.id,
			dcg.wallet_id AS walletId,
			dcg.bonus_wallet_id AS bonusWalletId,
			dcg.customer_id AS customerId,
			dcg.group_id AS groupId,
			dcg.bonus_plan_id AS bonusPlanId,
			dcg.status,
			dcg.serial_number AS serialNumber,
			dcg.cashback_first AS cashbackFirst,
			dcg.`type`,
			dcg.expire_date AS expireDate,
			dcg.bank_card_number AS bankCardNumber,
			dcg.bank_name AS bankName,
			dcg.parent_id AS parentId,
			dcg.total_new AS totalNew,
			dcg.create_date AS createDate,
			dg.name AS groupName
		FROM <include refid="tableName"/> dcg
		LEFT JOIN d_group dg ON dg.id = dcg.group_id
		WHERE dcg.id = #{id}
	</select>

	<select id="findByOpenId" parameterType="String" resultType="CustomerGroup">
		SELECT
			dcg.id,
			dcg.wallet_id AS walletId,
			dcg.bonus_wallet_id AS bonusWalletId,
			dcg.customer_id AS customerId,
			dcg.group_id AS groupId,
			dcg.bonus_plan_id AS bonusPlanId,
			dcg.status,
			dcg.cashback_first AS cashbackFirst,
			dcg.serial_number AS serialNumber,
			dcg.`type`,
			dcg.expire_date AS expireDate,
			dcg.bank_card_number AS bankCardNumber,
			dcg.bank_name AS bankName,
			dcg.parent_id AS parentId,
			dcg.total_new AS totalNew,
			dcg.create_date AS createDate,
			dg.name AS groupName
		FROM <include refid="tableName"/> dcg
		LEFT JOIN d_group dg ON dg.id = dcg.group_id
		LEFT JOIN d_customer dc ON dc.id = dcg.customer_id
		WHERE dc.open_id = #{id}
	</select>

	<insert id="add" parameterType="CustomerGroup" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO <include refid="tableName"/>
		(
			id,
			parent_id,
			wallet_id,
			bonus_wallet_id,
			customer_id,
			group_id,
			bonus_plan_id,
			status,
			serial_number,
			cashback_first,
			`type`,
			total_new,
			expire_date,
			bank_card_number,
			bank_name,
			create_date,
			creator,
			create_ip
		)
		VALUES 
		(
			#{id},
			#{parentId},
			#{walletId},
			#{bonusWalletId},
			#{customerId},
			#{groupId},
			#{bonusPlanId},
			#{status},
			#{serialNumber},
			#{cashbackFirst},
			#{type},
			#{totalNew},
			#{expireDate},
			#{bankCardNumber},
			#{bankName},
			NOW(),
		  	#{creator},
		  	#{createIp}
		)
	</insert>

	<update id="edit" parameterType="CustomerGroup">
		UPDATE <include refid="tableName"/>
		SET
			update_date = NOW()
			,updater = #{updater}
			,update_ip = #{updateIp}
			<if test="walletId != null">
				,wallet_id = #{walletId}
			</if>
			<if test="bonusWalletId != null">
				,bonus_wallet_id = #{bonusWalletId}
			</if>
			<if test="customerId != null">
				,customer_id = #{customerId}
			</if>
			<if test="groupId != null">
				,`group_id` = #{groupId}
			</if>
			<if test="bonusPlanId != null">
				,`bonus_plan_id` = #{bonusPlanId}
			</if>
			<if test="cashbackFirst != null">
				,`cashback_first` = #{cashbackFirst}
			</if>
			<if test="status != null">
				,status = #{status}
			</if>
			<if test="type != null">
				,`type` = #{type}
			</if>
			<if test="expireDate != null">
				,`expire_date` = #{expireDate}
			</if>
			<if test="bankCardNumber != null">
				,bank_card_number = #{bankCardNumber}
			</if>
			<if test="bankName != null">
				,bank_name = #{bankName}
			</if>
			<if test="totalNew != null">
				,total_new = #{totalNew}
			</if>
		WHERE id = #{id}
	</update>

	<update id="changeStatus" parameterType="Map">
		UPDATE <include refid="tableName"/>
		SET
			update_date = NOW()
			,updater = #{updater}
			,status = #{status}
		WHERE
			id IN
			<foreach collection="ids" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
 	</update>

</mapper>